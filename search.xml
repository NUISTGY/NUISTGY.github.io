<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Person Re-identification数据集描述——Market-1501</title>
      <link href="/2019/07/31/Person%20Re-identification%E6%95%B0%E6%8D%AE%E9%9B%86%E6%8F%8F%E8%BF%B0%E2%80%94%E2%80%94Market-1501/"/>
      <url>/2019/07/31/Person%20Re-identification%E6%95%B0%E6%8D%AE%E9%9B%86%E6%8F%8F%E8%BF%B0%E2%80%94%E2%80%94Market-1501/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://changingfond.oss-cn-hangzhou.aliyuncs.com/18-7-12/87140649.jpg" alt></p><h1 id="数据集简介"><a href="#数据集简介" class="headerlink" title="数据集简介"></a>数据集简介</h1><p><strong>Market-1501</strong> 数据集在清华大学校园中采集，夏天拍摄，在 2015 年构建并公开。它包括由6个摄像头（其中5个高清摄像头和1个低清摄像头）拍摄到的 1501 个行人、32668 个检测到的行人矩形框。每个行人至少由2个摄像头捕获到，并且在一个摄像头中可能具有多张图像。训练集有 751 人，包含 12,936 张图像，平均每个人有 17.2 张训练数据；测试集有 750 人，包含 19,732 张图像，平均每个人有 26.3 张测试数据。3368 张查询图像的行人检测矩形框是人工绘制的，而 gallery 中的行人检测矩形框则是使用DPM检测器检测得到的。该数据集提供的固定数量的训练集和测试集均可以在single-shot或multi-shot测试设置下使用。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>Market-1501<br>　　├── bounding_box_test<br>　　　　　　　├── 0000_c1s1_000151_01.jpg<br>　　　　　　　├── 0000_c1s1_000376_03.jpg<br>　　　　　　　├── 0000_c1s1_001051_02.jpg<br>　　├── bounding_box_train<br>　　　　　　　├── 0002_c1s1_000451_03.jpg<br>　　　　　　　├── 0002_c1s1_000551_01.jpg<br>　　　　　　　├── 0002_c1s1_000801_01.jpg<br>　　├── gt_bbox<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c1s1_009376_00.jpg<br>　　　　　　　├── 0001_c2s1_001976_00.jpg<br>　　├── gt_query<br>　　　　　　　├── 0001_c1s1_001051_00_good.mat<br>　　　　　　　├── 0001_c1s1_001051_00_junk.mat<br>　　├── query<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c2s1_000301_00.jpg<br>　　　　　　　├── 0001_c3s1_000551_00.jpg<br>　　└── readme.txt</p><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><ul><li><strong>“bounding_box_test”</strong>——用于测试集的 750 人，包含 19,732 张图像，前缀为 0000 表示在提取这 750 人的过程中DPM检测错的图（可能与query是同一个人），-1 表示检测出来其他人的图（不在这 750 人中）</li></ul><ul><li><p><strong>“bounding_box_train”</strong>——用于训练集的 751 人，包含 12,936 张图像</p></li><li><p><strong>“query”</strong>——为 750 人在每个摄像头中随机选择一张图像作为query，因此一个人的query最多有 6 个，共有 3,368 张图像</p></li><li><p><strong>“gt_query”</strong>——matlab格式，用于判断一个query的哪些图片是好的匹配（同一个人不同摄像头的图像）和不好的匹配（同一个人同一个摄像头的图像或非同一个人的图像）</p></li><li><p><strong>“gt_bbox”</strong>——手工标注的bounding box，用于判断DPM检测的bounding box是不是一个好的box</p></li></ul><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><p><strong>以 0001_c1s1_000151_01.jpg 为例</strong></p><ul><li>0001 表示每个人的标签编号，从0001到1501；</li><li>c1 表示第一个摄像头(camera1)，共有6个摄像头；</li><li>s1 表示第一个录像片段(sequece1)，每个摄像机都有数个录像段；</li><li>000151 表示 c1s1 的第000151帧图片，视频帧率25fps；</li><li>01 表示 c1s1_001051 这一帧上的第1个检测框，由于采用DPM检测器，对于每一帧上的行人可能会框出好几个bbox。00 表示手工标注框</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>Zheng, Liang, et al. “Scalable Person Re-identification: A Benchmark.” IEEE International Conference on Computer Vision IEEE Computer Society, 2015:1116-1124.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 激活函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ReLU的问题&amp;思考</title>
      <link href="/2019/07/16/%E5%85%B3%E4%BA%8EReLU%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E6%80%9D%E8%80%83/"/>
      <url>/2019/07/16/%E5%85%B3%E4%BA%8EReLU%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><strong>今天看完🐟书后回头捋了一下，突然对ReLU激活函数产生了疑问。</strong></p><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p><strong>试想一下有X1，X2两个输入，对应三个输出的简易网络：</strong></p><p><img src="http://m.qpic.cn/psb?/V14eJTFY137vJk/CUAvD0jYlwZQP78b42L*xt5KHFwfdmhwvy1BD11V8CY!/b/dIoBAAAAAAAA&bo=sAI8ArACPAIDCSw!&rf=viewer_4&t=5" alt="eg net" title="markdown"></p><p>根据对应把权值W设为W11,W12,W13…W23<br><strong>显然通过矩阵运算：</strong></p><blockquote><p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p></blockquote><p>所得到的表达式依旧是X的<strong>线性表达式</strong><br>下面通过<strong>ReLU层</strong>（这里假设都&gt;0）</p><p><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D119/sign=547aa813232eb938e86d7ef3ec6385fe/9d82d158ccbf6c818097871ab03eb13532fa409b.jpg" alt="ReLU" title="Pandao editor.md"><br><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=4263771563,3788752034&fm=26&gp=0.jpg" alt="ReLU" title="Pandao editor.md"><br>因为Y1，Y2，Y3＞0，故输出不变：</p><blockquote><p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p></blockquote><h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p>我们知道引入激活函数的目的是为了<strong>使层神经网络表达能力就更加强大（不再是输入的线性组合，而是几乎可以逼近任意函数，详见上篇Blog）</strong>，而通过小实验发现，ReLU好像并没有改变原式的线性结构，反而是原式输出。那么是否有悖机器学习的原理呢？</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>首先肯定一点：<strong>上面的实验确实反映了ReLU没有改变实验对象的线性结构。</strong></p><h3 id="下面细说："><a href="#下面细说：" class="headerlink" title="下面细说："></a>下面细说：</h3><p>首先观察实验，实验的基础是Y1,Y2,Y3＞0这个条件，在这个条件下显然是等价于恒等函数的。也就是说Y被原样加工。因为原来的表达式是线性结构，所以激活之后依旧是线性结构。但是，这并不能说明ReLU对增强神经网络的表现力无用。</p><p>事实是，参与训练的数据首先不止2个（参考MNIST数据集，训练输入就6万个），其次对权值w的初始化是按标准差为0.01的高斯分布来进行的，<strong>这就肯定输入ReLU层的数据不恒正</strong>！<br><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2378713402,2138177216&fm=26&gp=0.jpg" alt="高斯分布" title="Pandao editor.md"><br>而小于0的则被赋值0，这意味着什么呢？<strong>线性结构被破坏！</strong></p><p>用<strong>矛盾推理法</strong>来想一下这个问题（假设ReLU不改变线性结构）：</p><ul><li>那么应改满足F(X)=M·X（矩阵乘法）——&gt;ReLU ——&gt;M·X——&gt;G(F(X))=N·M·X——&gt;ReLU ——&gt;N·M·X…</li><li>可事实是：权值的正态性不保证每次输入都是正值，所以中间会出现等于0的情况</li><li>也就是F(X)=M·X（矩阵乘法）——&gt;<strong>ReLU ——&gt;0——&gt;G(0）！=N·M·X</strong>——&gt;…</li><li>显然线性传递被中断</li><li>或者说形成了一个新的线性空间，新空间与恒等线性空间互相无法表示，使整个空间呈非线性结构</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 激活函数 </tag>
            
            <tag> 代数系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>激活函数（一）</title>
      <link href="/2019/07/15/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/07/15/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="什么是激活函数："><a href="#什么是激活函数：" class="headerlink" title="什么是激活函数："></a>什么是激活函数：</h1><p>下午学完了神经网络误差的反向传播，心满意足看着满屏幕刚撸出来的Affine,Sigmoid,ReLU,Softmax……突然,心里发出一声疑问：<strong>激活函数有什么用？？？</strong>我慌了，我说不上来，但是隐隐约约能知道这玩意是干嘛的，本着一贯<del>刨根问底跑个稀烂</del>的作风,我决定彻底搞清楚！</p><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>首先回到机器学习最初始的那个地方—–<strong>逻辑门（感知机表示）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#与门感知机</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AND</span><span class="params">(x1,x2)</span>:</span></span><br><span class="line">    w1,w2,theta=<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.7</span></span><br><span class="line">    tmp=x1*w1+x2*w2</span><br><span class="line">    <span class="keyword">if</span> tmp&lt;=theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> tmp&gt;theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#Test</span></span><br><span class="line">AND(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#输出0</span></span><br><span class="line">AND(<span class="number">1</span>,<span class="number">0</span>)  <span class="comment">#输出0</span></span><br><span class="line">AND(<span class="number">0</span>,<span class="number">1</span>)  <span class="comment">#输出0</span></span><br><span class="line">AND(<span class="number">1</span>,<span class="number">1</span>)  <span class="comment">#输出1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#或门感知机</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">OR</span><span class="params">(x1,x2)</span>:</span></span><br><span class="line">    w1,w2,theta=<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.2</span></span><br><span class="line">    tmp=x1*w1+x2*w2</span><br><span class="line">    <span class="keyword">if</span> tmp&lt;=theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> tmp&gt;theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#Test</span></span><br><span class="line">OR(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#输出0</span></span><br><span class="line">OR(<span class="number">1</span>,<span class="number">0</span>)  <span class="comment">#输出1</span></span><br><span class="line">OR(<span class="number">0</span>,<span class="number">1</span>)  <span class="comment">#输出1</span></span><br><span class="line">OR(<span class="number">1</span>,<span class="number">1</span>)  <span class="comment">#输出1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#与非门感知机</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NAND</span><span class="params">(x1,x2)</span>:</span></span><br><span class="line">    w1,w2,theta=<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.7</span></span><br><span class="line">    tmp=x1*w1+x2*w2</span><br><span class="line">    <span class="keyword">if</span> tmp&lt;=theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> tmp&gt;theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Test</span></span><br><span class="line">XOR(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#输出1</span></span><br><span class="line">XOR(<span class="number">1</span>,<span class="number">0</span>)  <span class="comment">#输出1</span></span><br><span class="line">XOR(<span class="number">0</span>,<span class="number">1</span>)  <span class="comment">#输出1</span></span><br><span class="line">XOR(<span class="number">1</span>,<span class="number">1</span>)  <span class="comment">#输出0</span></span><br></pre></td></tr></table></figure><p>毫无技术含量，所以这里就不细讲代码。</p><p><strong>接下来看看如何表示异或门：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">XOR</span><span class="params">(x1,x2)</span>:</span></span><br><span class="line">    s1=NAND(x1,x2)</span><br><span class="line">    s2=OR(x1,x2)</span><br><span class="line">    y=AND(s1,s2)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">XOR(<span class="number">0</span>,<span class="number">0</span>)   <span class="comment">#输出0</span></span><br><span class="line">XOR(<span class="number">1</span>,<span class="number">0</span>)   <span class="comment">#输出1</span></span><br><span class="line">XOR(<span class="number">0</span>,<span class="number">1</span>)   <span class="comment">#输出1</span></span><br><span class="line">XOR(<span class="number">1</span>,<span class="number">1</span>)   <span class="comment">#输出0</span></span><br></pre></td></tr></table></figure><p>显然异或门的实现借助了另外三个门！<br>下面从<strong>几何角度</strong>上看看异或门：<br><img src="http://m.qpic.cn/psb?/V14eJTFY137vJk/bURzxexUsqRtcc1oUuOC6v3yPlLZcGNjr.cZe.0KyZY!/b/dOYAAAAAAAAA&bo=OAT6ADgE.gADCSw!&rf=viewer_4&t=5" alt="异或门区域" title="markdown"><br><strong>显然：异或门划分的空间是非线性的！而另外三个门划分都是线性的！</strong></p><p>现在再回头思考，发现通过对简单门的叠加，实现了非线性划分空间的复杂门！</p><h2 id="回到神经网络中"><a href="#回到神经网络中" class="headerlink" title="回到神经网络中"></a>回到神经网络中</h2><p>神经网络中，我们知道，隐藏层中主要是Affine层和各种激活函数层：<br><img src="http://a1.qpic.cn/psb?/V14eJTFY137vJk/PThWXF2nTqJ4qFpWbCpfZIHVibuUYFuPmh6m*R7RHoI!/b/dGwBAAAAAAAA&ek=1&kp=1&pt=0&bo=mgTrAZoE6wEDORw!&tl=1&vuin=1328447669&tm=1563188400&sce=60-2-2&rf=viewer_4&t=5" alt="net" title="markdown"><br>现在假设把激活函数都删掉，也就是说经过一层仿射变换后不加处理继续下一层仿射变换。</p><blockquote><p>比如：x-&gt;w·x=y-&gt;w’·y=z…（矩阵点乘）</p></blockquote><p>这样会有什么问题呢？很显然。</p><blockquote><p>注意： x-&gt;w·x=y-&gt;w’·y=z就相当于z=cx,其中c=w·w’</p></blockquote><p>这说明<strong>两层仿射变换后的表达式结构还是线性的！！</strong>同理n层之后还是线性！这简直是无用功！要记住，神经网络那么多层的目的是尽可能学习如何逼近数据，如果数据是非线性结构排布的，那叠加再多也毫无卵用！<br>所以现在再来看看这个问题：<strong>为什么需要激活函数？</strong></p><h2 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h2><p>如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，<strong>无论你神经网络有多少层，输出都是输入的线性组合</strong>，与没有隐藏层效果相当，这种情况就是最原始的感知机（Perceptron）了，那么网络的逼近能力就相当有限。正因为上面的原因，我们决定引入非线性函数作为激励函数，这样深层神经网络表达能力就更加强大（不再是输入的线性组合，而是<strong>几乎可以逼近任意函数</strong>）</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 激活函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy之sum函数的axis参数</title>
      <link href="/2019/07/15/numpy%E4%B8%AD%E7%9A%84axis%E5%8F%82%E6%95%B0/"/>
      <url>/2019/07/15/numpy%E4%B8%AD%E7%9A%84axis%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h1><p>没有axis参数表示全部相加，axis＝0表示按列相加，axis＝1表示按照行的方向。验证如下：<br><img src="https://5b0988e595225.cdn.sohucs.com/images/20171124/e90ccf3e7386468fa64c8b4bc0e60e5e.png" alt="axis&amp;sum"></p><h1 id="推广："><a href="#推广：" class="headerlink" title="推广："></a>推广：</h1><p>axis=i表示对array的第i个维度<strong>变化</strong>的方向进行操作！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🐟书踩坑（一）</title>
      <link href="/2019/07/14/%E9%B1%BC%E4%B9%A6%E8%B8%A9%E5%9D%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/07/14/%E9%B1%BC%E4%B9%A6%E8%B8%A9%E5%9D%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="废话不多说，俺先讲一下来龙去脉"><a href="#废话不多说，俺先讲一下来龙去脉" class="headerlink" title="废话不多说，俺先讲一下来龙去脉~"></a>废话不多说，俺先讲一下来龙去脉~</h2><p>今天看鱼书P108页，遇到一个想不通的地方，我先放一波源码：<br><del>（不了解的小伙伴看上一篇博文，有源码连接）</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.pardir)  <span class="comment"># 为了导入父目录中的文件而进行的设定</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> common.functions <span class="keyword">import</span> softmax, cross_entropy_error</span><br><span class="line"><span class="keyword">from</span> common.gradient <span class="keyword">import</span> numerical_gradient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">simpleNet</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.W = np.random.randn(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> np.dot(x, self.W)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, x, t)</span>:</span></span><br><span class="line">        z = self.predict(x)</span><br><span class="line">        y = softmax(z)</span><br><span class="line">        loss = cross_entropy_error(y, t)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">0.6</span>, <span class="number">0.9</span>])</span><br><span class="line">t = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">net = simpleNet()</span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> w: net.loss(x, t)</span><br><span class="line">dW = numerical_gradient(f, net.W)</span><br><span class="line"></span><br><span class="line">print(dW)</span><br></pre></td></tr></table></figure><p>没错，这个是一个求神经网络梯度 w 的简单脚本。</p><p>如你所见，文件头也import了许多外部函数，下面贴其中一个比较重要的外部函数：</p><p><strong>numerical_gradient函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numerical_gradient</span><span class="params">(f, x)</span>:</span></span><br><span class="line">    h = <span class="number">1e-4</span> <span class="comment"># 0.0001</span></span><br><span class="line">    grad = np.zeros_like(x)</span><br><span class="line">    </span><br><span class="line">    it = np.nditer(x, flags=[<span class="string">'multi_index'</span>], op_flags=[<span class="string">'readwrite'</span>])</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> it.finished:</span><br><span class="line">        idx = it.multi_index</span><br><span class="line">        tmp_val = x[idx]</span><br><span class="line">        x[idx] = float(tmp_val) + h</span><br><span class="line">        fxh1 = f(x) <span class="comment"># f(x+h)</span></span><br><span class="line">        </span><br><span class="line">        x[idx] = tmp_val - h </span><br><span class="line">        fxh2 = f(x) <span class="comment"># f(x-h)</span></span><br><span class="line">        grad[idx] = (fxh1 - fxh2) / (<span class="number">2</span>*h)</span><br><span class="line">        </span><br><span class="line">        x[idx] = tmp_val <span class="comment"># 还原值</span></span><br><span class="line">        it.iternext()   </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> grad</span><br></pre></td></tr></table></figure><h2 id="下面讲讲这个坑"><a href="#下面讲讲这个坑" class="headerlink" title="下面讲讲这个坑"></a>下面讲讲这个坑</h2><p>小伙子们注意看第一段代码28，29两行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> w: net.loss(x, t)</span><br><span class="line">dW = numerical_gradient(f, net.W)</span><br></pre></td></tr></table></figure><p>函数f中lambda表达式没什么问题，注意里面的参数 w ，仔细看，你会发现……卧槽！这不没jb卵用吗…<br>如果你这么想，那你跟年轻的我有的一拼，<del>too young,too simple</del></p><p>接着看下一行：<strong>dW = numerical_gradient(f, net.W)</strong>很显然调用了<strong>numerical_gradient函数</strong>，没毛病。但是，兄弟萌，请仔细看看<strong>numerical_gradient函数</strong>实现机制，你会发现：</p><blockquote><p>第13行：   fxh1 = f(x)<br>第16行：   fxh2 = f(x)<br>？？？？？？？？？？</p></blockquote><p>看不出问题吗？<br>注意：这里的f是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> w: net.loss(x, t)</span><br></pre></td></tr></table></figure><p>w是伪参数，没卵用，而x是<strong>net.W</strong>——神经网络的权重组成的数组，这尼玛驴头不对马嘴怎么就传给f了？？？而且f也不需要参数啊！</p><p>我是左思右想一下午，后来有了一个猜想来解释这段代码。</p><h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><p>我猜想fxh1 = f(x) ，fxh2 = f(x)括号里的x对程序根本没卵用，于是我大胆的删掉了x,变成：</p><blockquote><p>第13行：   fxh1 = f()<br>第16行：   fxh2 = f()</p></blockquote><p>当然为了保持兼容，也得把lambda表达式那个伪参数删了：</p><blockquote><p>f = lambda : net.loss(x, t)</p></blockquote><p>然后编译运行，结果…tmd就对了，你肯定觉得这是个坑，没错，我开始也觉得是坑，坑死我了。<br>后来浏览了后面的代码，发现了一些用<strong>numerical_gradient函数</strong>做测试脚本，其中测试的是一些简单函数的梯度问题，涉及到变量x所以<strong>numerical_gradient函数</strong>的x要保留。。。。。。相应的，神经网络求梯度就要顺着<strong>numerical_gradient函数</strong>，没必要再写一个，于是就加了伪参数w保证兼容。</p><p>最后俺深刻的明白：实践是检验真理的唯一标准<del>（早试试就不会浪费那么多时间了）</del></p><p><img src="http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/5sLv1ifk0X3wKuPoH9lo.XgUnbenkVfUYF4G24tUjTE!/r/dMMAAAAAAAAA" alt="END" title="END"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MNIST数据集的下载与数据处理</title>
      <link href="/2019/07/12/mnist%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%A4%84%E7%90%86/"/>
      <url>/2019/07/12/mnist%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="源码（python）"><a href="#源码（python）" class="headerlink" title="源码（python）"></a>源码（python）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">raise</span> ImportError(<span class="string">'You should use Python 3.x'</span>)</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url_base = <span class="string">'http://yann.lecun.com/exdb/mnist/'</span></span><br><span class="line">key_file = &#123;</span><br><span class="line">    <span class="string">'train_img'</span>:<span class="string">'train-images-idx3-ubyte.gz'</span>,</span><br><span class="line">    <span class="string">'train_label'</span>:<span class="string">'train-labels-idx1-ubyte.gz'</span>,</span><br><span class="line">    <span class="string">'test_img'</span>:<span class="string">'t10k-images-idx3-ubyte.gz'</span>,</span><br><span class="line">    <span class="string">'test_label'</span>:<span class="string">'t10k-labels-idx1-ubyte.gz'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataset_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">save_file = dataset_dir + <span class="string">"/mnist.pkl"</span></span><br><span class="line"></span><br><span class="line">train_num = <span class="number">60000</span></span><br><span class="line">test_num = <span class="number">10000</span></span><br><span class="line">img_dim = (<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">img_size = <span class="number">784</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_download</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    file_path = dataset_dir + <span class="string">"/"</span> + file_name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Downloading "</span> + file_name + <span class="string">" ... "</span>)</span><br><span class="line">    urllib.request.urlretrieve(url_base + file_name, file_path)</span><br><span class="line">    print(<span class="string">"Done"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_mnist</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> key_file.values():</span><br><span class="line">       _download(v)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_load_label</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    file_path = dataset_dir + <span class="string">"/"</span> + file_name</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Converting "</span> + file_name + <span class="string">" to NumPy Array ..."</span>)</span><br><span class="line">    <span class="keyword">with</span> gzip.open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            labels = np.frombuffer(f.read(), np.uint8, offset=<span class="number">8</span>)</span><br><span class="line">    print(<span class="string">"Done"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_load_img</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    file_path = dataset_dir + <span class="string">"/"</span> + file_name</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Converting "</span> + file_name + <span class="string">" to NumPy Array ..."</span>)    </span><br><span class="line">    <span class="keyword">with</span> gzip.open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = np.frombuffer(f.read(), np.uint8, offset=<span class="number">16</span>)</span><br><span class="line">    data = data.reshape(<span class="number">-1</span>, img_size)</span><br><span class="line">    print(<span class="string">"Done"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_convert_numpy</span><span class="params">()</span>:</span></span><br><span class="line">    dataset = &#123;&#125;</span><br><span class="line">    dataset[<span class="string">'train_img'</span>] =  _load_img(key_file[<span class="string">'train_img'</span>])</span><br><span class="line">    dataset[<span class="string">'train_label'</span>] = _load_label(key_file[<span class="string">'train_label'</span>])    </span><br><span class="line">    dataset[<span class="string">'test_img'</span>] = _load_img(key_file[<span class="string">'test_img'</span>])</span><br><span class="line">    dataset[<span class="string">'test_label'</span>] = _load_label(key_file[<span class="string">'test_label'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dataset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_mnist</span><span class="params">()</span>:</span></span><br><span class="line">    download_mnist()</span><br><span class="line">    dataset = _convert_numpy()</span><br><span class="line">    print(<span class="string">"Creating pickle file ..."</span>)</span><br><span class="line">    <span class="keyword">with</span> open(save_file, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(dataset, f, <span class="number">-1</span>)</span><br><span class="line">    print(<span class="string">"Done!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_change_one_hot_label</span><span class="params">(X)</span>:</span></span><br><span class="line">    T = np.zeros((X.size, <span class="number">10</span>))</span><br><span class="line">    <span class="keyword">for</span> idx, row <span class="keyword">in</span> enumerate(T):</span><br><span class="line">        row[X[idx]] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> T</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_mnist</span><span class="params">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class="line">    <span class="string">"""读入MNIST数据集</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class="line"><span class="string">    one_hot_label : </span></span><br><span class="line"><span class="string">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class="line"><span class="string">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class="line"><span class="string">    flatten : 是否将图像展开为一维数组</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_file):</span><br><span class="line">        init_mnist()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> open(save_file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dataset = pickle.load(f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> normalize:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'train_img'</span>, <span class="string">'test_img'</span>):</span><br><span class="line">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class="line">            dataset[key] /= <span class="number">255.0</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> one_hot_label:</span><br><span class="line">        dataset[<span class="string">'train_label'</span>] = _change_one_hot_label(dataset[<span class="string">'train_label'</span>])</span><br><span class="line">        dataset[<span class="string">'test_label'</span>] = _change_one_hot_label(dataset[<span class="string">'test_label'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flatten:</span><br><span class="line">         <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'train_img'</span>, <span class="string">'test_img'</span>):</span><br><span class="line">            dataset[key] = dataset[key].reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (dataset[<span class="string">'train_img'</span>], dataset[<span class="string">'train_label'</span>]), (dataset[<span class="string">'test_img'</span>], dataset[<span class="string">'test_label'</span>]) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init_mnist()</span><br></pre></td></tr></table></figure><h2 id="load-mnist函数讲解"><a href="#load-mnist函数讲解" class="headerlink" title="load_mnist函数讲解"></a>load_mnist函数讲解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_mnist</span><span class="params">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class="line">    <span class="string">"""读入MNIST数据集</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class="line"><span class="string">    one_hot_label : </span></span><br><span class="line"><span class="string">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class="line"><span class="string">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class="line"><span class="string">    flatten : 是否将图像展开为一维数组</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_file):</span><br><span class="line">        init_mnist()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> open(save_file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dataset = pickle.load(f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> normalize:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'train_img'</span>, <span class="string">'test_img'</span>):</span><br><span class="line">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class="line">            dataset[key] /= <span class="number">255.0</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> one_hot_label:</span><br><span class="line">        dataset[<span class="string">'train_label'</span>] = _change_one_hot_label(dataset[<span class="string">'train_label'</span>])</span><br><span class="line">        dataset[<span class="string">'test_label'</span>] = _change_one_hot_label(dataset[<span class="string">'test_label'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flatten:</span><br><span class="line">         <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'train_img'</span>, <span class="string">'test_img'</span>):</span><br><span class="line">            dataset[key] = dataset[key].reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (dataset[<span class="string">'train_img'</span>], dataset[<span class="string">'train_label'</span>]), (dataset[<span class="string">'test_img'</span>], dataset[<span class="string">'test_label'</span>])</span><br></pre></td></tr></table></figure><p>load_mnist函数以<strong>“(训练图像,训练标签),(测试图像,测试标签)”</strong>的形式返回读入的MNIST数据。</p><p>此外,还可以像<strong>load_mnist(normalize=True,flatten=True,one_hot_label=False)</strong>这样,设置3个参数。</p><ul><li>第1个参数normalize设置是否将输入图像正规化为0.0-1.0的值。如果将该参数设置为 False,则输入图像的像素会保持原来的0-255。</li><li>第2个参数 flatten设置是否展开输入图像(变成一维数组)。如果将该参数设置为 False,则输入图像为1×28×28的三维数组;若设置为True,则输入图像会保存为由784个元素构成的一维数组。</li><li>第3个参数one_hot_label设置是否将标签保存为one-hot表示(one-hot representation)。one-hot表示是仅正确解标签为1,其余皆为0的数组,就像[0,0,1,0,0,0,0,0,0,0]这样。当one_hot_label为Fase时,只是像7、2这样简单保存正确解标签;当 one_hot_label为True时,标签则保存为one-hot表示。</li></ul><blockquote><p>PS:想获取完整的手写数字识别源码请访问我的GitHub：<br><a href="https://github.com/NUISTGY/Codes-of-fish-book.git" target="_blank" rel="noopener">https://github.com/NUISTGY/Codes-of-fish-book.git</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手写识别 </tag>
            
            <tag> MNIST </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是MNIST 数据集</title>
      <link href="/2019/07/12/mnist%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/07/12/mnist%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><strong>MNIST 数据集已经是一个被”嚼烂”了的数据集, 很多教程都会对它”下手”, 几乎成为一个 “典范”. 不过有些人可能对它还不是很了解, 下面来介绍一下.</strong></p><p><img src="http://m.qpic.cn/psb?/V14eJTFY137vJk/FqQaq.BD0UAhxFhRh0JtDLzteoHOs5pn5LEBVCQbD5c!/b/dN0AAAAAAAAA&bo=TgKGAU4ChgEDCSw!&rf=viewer_4&t=5" alt="手写数字" title="手写数字"></p><p>MNIST 数据集可在 <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">http://yann.lecun.com/exdb/mnist/</a> 获取, 它包含了四个部分:</p><ul><li>Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)</li><li>Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)</li><li>Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)</li><li>Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)</li></ul><p><img src="http://m.qpic.cn/psb?/V14eJTFY137vJk/SrI8491l5bwJXBtkBhwDhoXuXHej.0uabkMwozlJ6S0!/b/dPQAAAAAAAAA&bo=2AQiAdgEIgEDCSw!&rf=viewer_4&t=5" alt="解压后" title="解压后"></p><p>MNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手写识别 </tag>
            
            <tag> MNIST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的3层神经网络实现</title>
      <link href="/2019/07/11/%E7%AE%80%E5%8D%95%E7%9A%843%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/11/%E7%AE%80%E5%8D%95%E7%9A%843%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="使用sigmoid作为激活函数的极简3层神经网络-前向-范例"><a href="#使用sigmoid作为激活函数的极简3层神经网络-前向-范例" class="headerlink" title="使用sigmoid作为激活函数的极简3层神经网络(前向)范例"></a>使用sigmoid作为激活函数的极简3层神经网络(前向)范例</h2><h3 id="导入numpy库"><a href="#导入numpy库" class="headerlink" title="导入numpy库"></a>导入numpy库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="定义sigmoid函数"><a href="#定义sigmoid函数" class="headerlink" title="定义sigmoid函数"></a>定义sigmoid函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-x))</span><br></pre></td></tr></table></figure><h3 id="初始化神经网络"><a href="#初始化神经网络" class="headerlink" title="初始化神经网络"></a>初始化神经网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_network</span><span class="params">()</span>:</span></span><br><span class="line">    network=&#123;&#125;</span><br><span class="line">    network[<span class="string">'w1'</span>]=np.array([[<span class="number">0.1</span>,<span class="number">0.3</span>,<span class="number">0.5</span>],[<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">0.6</span>]])</span><br><span class="line">    network[<span class="string">'w2'</span>]=np.array([[<span class="number">0.1</span>,<span class="number">0.4</span>],[<span class="number">0.2</span>,<span class="number">0.5</span>],[<span class="number">0.3</span>,<span class="number">0.6</span>]])</span><br><span class="line">    network[<span class="string">'w3'</span>]=np.array([[<span class="number">0.1</span>,<span class="number">0.3</span>],[<span class="number">0.2</span>,<span class="number">0.4</span>]])</span><br><span class="line">    network[<span class="string">'b1'</span>]=np.array([<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>])</span><br><span class="line">    network[<span class="string">'b2'</span>]=np.array([<span class="number">0.1</span>,<span class="number">0.2</span>])</span><br><span class="line">    network[<span class="string">'b3'</span>]=np.array([<span class="number">0.1</span>,<span class="number">0.2</span>])</span><br><span class="line">    <span class="keyword">return</span> network</span><br></pre></td></tr></table></figure><h3 id="定义神经网络"><a href="#定义神经网络" class="headerlink" title="定义神经网络"></a>定义神经网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(network,x)</span>:</span></span><br><span class="line">    w1,w2,w3=network[<span class="string">'w1'</span>],network[<span class="string">'w2'</span>],network[<span class="string">'w3'</span>]</span><br><span class="line">    b1,b2,b3=network[<span class="string">'b1'</span>],network[<span class="string">'b2'</span>],network[<span class="string">'b3'</span>]</span><br><span class="line">    </span><br><span class="line">    a1=np.dot(x,w1)+b1</span><br><span class="line">    z1=sigmoid(a1)</span><br><span class="line">    a2=np.dot(z1,w2)+b2</span><br><span class="line">    z2=sigmoid(a2)</span><br><span class="line">    a3=np.dot(z2,w3)+b3</span><br><span class="line">    y=a3</span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">network=init_network()</span><br><span class="line">x=np.array([<span class="number">1.0</span>,<span class="number">0.5</span>])</span><br><span class="line">y=forward(network,x)</span><br><span class="line">print(y)<span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V14eJTFY137vJk/22kQwx1Jpk4jhWu*qsEKh5DPm8owKdu5hSgq66W0G80!/b/dD0BAAAAAAAA&bo=DQlABuYKhwcRCRA!&rf=viewer_4&t=5" alt="神经网络" title="神经网络"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy数组和python列表的区别</title>
      <link href="/2019/07/11/numpy%E6%95%B0%E7%BB%84%E5%92%8Cpython%E5%88%97%E8%A1%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/07/11/numpy%E6%95%B0%E7%BB%84%E5%92%8Cpython%E5%88%97%E8%A1%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><ol><li><p>numpy数组创建时是固定大小，python数组（list）是动态的。更改ndarray的大小将创建一个新数组并删除原来的数组。</p></li><li><p>元素类型区别。</p></li><li><p>NumPy数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。</p></li><li><p>python的List可以存放不同类型的元素。</p></li><li><p>例外情况：Python的原生数组里包含了NumPy的对象的时候，这种情况下就允许不同大小元素的数组。</p></li><li><p>数学操作执行效率高于原生python</p></li><li><p>越来越多的基于Python的科学和数学软件包使用NumPy数组</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感知机初识</title>
      <link href="/2019/07/10/%E6%84%9F%E7%9F%A5%E6%9C%BA%E5%88%9D%E8%AF%86/"/>
      <url>/2019/07/10/%E6%84%9F%E7%9F%A5%E6%9C%BA%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="感知机（perceptron"><a href="#感知机（perceptron" class="headerlink" title="感知机（perceptron)"></a>感知机（perceptron)</h1><p>感知机是神经网络（深度学习）的起源算法，学习感知机的构造是通向神经网络和深度学习的一种重要思想。</p><blockquote><p>严格讲，应该称为“人工神经元”或“朴素感知机”，但是因为很多基本的处理都是共通的，所以这里就简单地称为“感知机”。</p></blockquote><h2 id="原理简介："><a href="#原理简介：" class="headerlink" title="原理简介："></a>原理简介：</h2><p>感知机接收多个输入信号，输出一个信号。<br>这里所说的“信号”可以想 象成电流或河流那样具备“<strong>流动性</strong>”的东西。<br>像电流流过导线，向前方输送 电子一样，感知机的信号也会形成流，向前方输送信息。<br>但是，和实际的电 流不同的是，感知机的信号只有<strong>“流/不流”（1/0）</strong>两种取值。<br>0 对应“不传递信号”，1对应“传递信号”。</p><p><img src="http://a3.qpic.cn/psb?/V14eJTFY48iu60/HhL0bbMh2F4NbR3pvHQa*nqBW8y.PZFTiByQEwfgucA!/c/dN4AAAAAAAAA&ek=1&kp=1&pt=0&bo=4QJdAeECXQEDGTw!&tl=1&vuin=1328447669&tm=1562738400&sce=60-2-2&rf=0-0" alt="net" title="markdown"></p><p><strong>如图</strong></p><ul><li>x<sub>1</sub> 、x<sub>2</sub>是输入信号，</li><li>y 是输出信号，</li><li>w<sub>1</sub>、w<sub>2</sub>是权重 （w 是 weight 的首字母）。</li><li>图中的○称为“神经元”或者“节点”。</li><li>输入信号被送往神经元时，会被分别乘以固定的权重（w<sub>1</sub> x<sub>1</sub> , w<sub>2</sub> x<sub>2</sub> ）。</li><li>神经元会计算传送过来的信号的总和，只有当这个总和超过 了某个界限值时，才会输出1（这也称为“神经元被激活）。</li><li>这里将这个界限值称为阈值，用符号θ表示。</li></ul><p><img src="http://a3.qpic.cn/psb?/V14eJTFY137vJk/Jb9LnAgcqtwC7udEtAvxtUYaeAQmdphrXHM8w98K9MQ!/b/dIoBAAAAAAAA&ek=1&kp=1&pt=0&bo=pAc*AqQHPwIRGS4!&tl=3&vuin=1328447669&tm=1562742000&sce=60-4-3&rf=viewer_4&t=5" alt="公式" title="公式"></p><p>感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个 信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。<br>权重：相当于电流里的电阻。电阻是决定电流流动难度的参数， 电阻越低，通过的电流就越大。<br>而感知机的权重则是值越大，通过的信号就越大。<br>不管是电阻还是权重，在控制信号流动难度（或者流 动容易度）这一点上的作用都是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感知机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/09/hello-world/"/>
      <url>/2019/07/09/hello-world/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
